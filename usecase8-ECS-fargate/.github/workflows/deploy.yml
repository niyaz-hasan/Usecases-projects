name: Deploy to ECS
on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-service1:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975049998898:role/githubaction-assumerole
          role-session-name: github-assume
          aws-region: us-east-1

      - name: Get Service1 Image URI
        run: |
          echo "image_uri=$(aws ecr describe-images \
            --repository-name test-repo-1 \
            --image-ids imageTag=${{ github.event.workflow_run.head_sha }} \
            --query 'imageDetails[0].imageTags[?contains(@, `${{ github.event.workflow_run.head_sha }}`)]' \
            --output text)" >> $GITHUB_OUTPUT
        id: get_image_service1

      - name: Download Task Definition for Service1
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_SERVICE1 }} \
            --query taskDefinition > task-definition-service1.json

      - name: Update Image in Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-service1.json
          container-name: ${{ vars.CONTAINER_NAME_SERVICE1 }}
          image: ${{ steps.get_image_service1.outputs.image_uri }}

      - name: Output Updated Task Definition
        run: |
          cat task-definition-service1.json

      - name: Deploy Service1 to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition-service1.json
          service: ${{ vars.ECS_SERVICE_SERVICE1 }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-service2:
    runs-on: ubuntu-latest
    needs: deploy-service1  # Optional: Run sequentially after service1
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975049998898:role/githubaction-assumerole
          role-session-name: github-assume
          aws-region: us-east-1

      - name: Get Service2 Image URI
        run: |
          echo "image_uri=$(aws ecr describe-images \
            --repository-name test-repo-2 \
            --image-ids imageTag=${{ github.event.workflow_run.head_sha }} \
            --query 'imageDetails[0].imageTags[?contains(@, `${{ github.event.workflow_run.head_sha }}`)]' \
            --output text)" >> $GITHUB_OUTPUT
        id: get_image_service2

      - name: Download Task Definition for Service2
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_SERVICE2 }} \
            --query taskDefinition > task-definition-service2.json

      - name: Update Image in Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-service2.json
          container-name: ${{ vars.CONTAINER_NAME_SERVICE2 }}
          image: ${{ steps.get_image_service2.outputs.image_uri }}
      
      - name: Output Updated Task Definition
        run: |
          cat task-definition-service1.json

      - name: Deploy Service2 to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition-service2.json
          service: ${{ vars.ECS_SERVICE_SERVICE2 }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true